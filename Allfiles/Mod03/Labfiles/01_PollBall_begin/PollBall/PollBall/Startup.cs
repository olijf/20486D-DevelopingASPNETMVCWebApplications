using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using PollBall.Services;

namespace PollBall
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSingleton<IPollResultService, PollResultService>();
            services.AddMvc();
        }
        /*
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.Run(async (context) =>
            {
                await context.Response.WriteAsync("Hello World!");
            });
        }*/
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, IPollResultService pollResults)
        {
            app.Use(async (context, next) =>
            {
                if (context.Request.Query.ContainsKey("favorite"))
                {
                    SelectedGame selectedValue = (SelectedGame)Enum.Parse(typeof(SelectedGame), context.Request.Query["favorite"], true);
                    pollResults.AddVote(selectedValue);
                    context.Response.Headers.Add("Content-Type", "text/html");
                    await context.Response.WriteAsync("Thank you for submitting the poll. You may look at the poll results <a href='/?submitted=true'>Here</a>.");

                    /*
                    var gameVotes = new SortedDictionary<SelectedGame, int>(pollResults.GetVoteResult());
                    foreach (var item in gameVotes)
                    {
                        await context.Response.WriteAsync($"<div> Game name: {item.Key}. Votes: {item.Value} </div>");
                    }*/
                }
                else
                {
                    await next.Invoke();
                }
            });
            app.UseStaticFiles();
            app.UseMvcWithDefaultRoute();
            app.Run(
                async (context) =>
                {
                    await context.Response.WriteAsync("This text was generated by the app.Run middleware. wwwroot folder path: " + env.WebRootPath);
                });
        }
    }
}
